class Solution {
public:
    bool check(map<char, int> m) {
        for (auto it : m) {
            if (it.second > 1 && it.first != '.') {
                return false;
            }
        }
        return true;
    }
    bool isValidSudoku(vector<vector<char>>& board) {
        map<char,int> r1, r2, r3, r4,r5,r6,r7,r8,r9;
    map<char,int> c1, c2, c3, c4, c5, c6, c7, c8, c9;
    map<char,int> b1, b2, b3, b4, b5, b6, b7, b8, b9;

    for(int i=0;i<9;i++){
        c1[board[i][0]]++;
        c2[board[i][1]]++;
        c3[board[i][2]]++;
        c4[board[i][3]]++;
        c5[board[i][4]]++;
        c6[board[i][5]]++;
        c7[board[i][6]]++;
        c8[board[i][7]]++;
        c9[board[i][8]]++;
    
    }

    for(int i=0;i<9;i++){
        r1[board[0][i]]++;
        r2[board[1][i]]++;
        r3[board[2][i]]++;
        r4[board[3][i]]++;
        r5[board[4][i]]++;
        r6[board[5][i]]++;
        r7[board[6][i]]++;
        r8[board[7][i]]++;
        r9[board[8][i]]++;
    }

    b1[board[0][0]]++;  
    b1[board[0][1]]++;  
    b1[board[0][2]]++;  
    b1[board[1][0]]++;  
    b1[board[1][1]]++;  
    b1[board[1][2]]++;  
    b1[board[2][0]]++;  
    b1[board[2][1]]++;  
    b1[board[2][2]]++;  

    b2[board[0][3]]++;  
    b2[board[0][4]]++;  
    b2[board[0][5]]++;  
    b2[board[1][3]]++;  
    b2[board[1][4]]++;  
    b2[board[1][5]]++;  
    b2[board[2][3]]++;  
    b2[board[2][4]]++;  
    b2[board[2][5]]++;  

    b3[board[0][6]]++;  
    b3[board[0][7]]++;  
    b3[board[0][8]]++;  
    b3[board[1][6]]++;  
    b3[board[1][7]]++;  
    b3[board[1][8]]++;  
    b3[board[2][6]]++;  
    b3[board[2][7]]++;  
    b3[board[2][8]]++;  

    b4[board[3][0]]++;  
    b4[board[3][1]]++;  
    b4[board[3][2]]++;  
    b4[board[4][0]]++;  
    b4[board[4][1]]++;  
    b4[board[4][2]]++;  
    b4[board[5][0]]++;  
    b4[board[5][1]]++;  
    b4[board[5][2]]++;  

    b5[board[3][3]]++;  
    b5[board[3][4]]++;  
    b5[board[3][5]]++;  
    b5[board[4][3]]++;  
    b5[board[4][4]]++;  
    b5[board[4][5]]++;  
    b5[board[5][3]]++;  
    b5[board[5][4]]++;  
    b5[board[5][5]]++;  

    b6[board[3][6]]++;  
    b6[board[3][7]]++;  
    b6[board[3][8]]++;  
    b6[board[4][6]]++;  
    b6[board[4][7]]++;  
    b6[board[4][8]]++;  
    b6[board[5][6]]++;  
    b6[board[5][7]]++;  
    b6[board[5][8]]++;  

    b7[board[6][0]]++;  
    b7[board[6][1]]++;  
    b7[board[6][2]]++;  
    b7[board[7][0]]++;  
    b7[board[7][1]]++;  
    b7[board[7][2]]++;  
    b7[board[8][0]]++;  
    b7[board[8][1]]++;  
    b7[board[8][2]]++;  

    b8[board[6][3]]++;  
    b8[board[6][4]]++;  
    b8[board[6][5]]++;  
    b8[board[7][3]]++;  
    b8[board[7][4]]++;  
    b8[board[7][5]]++;  
    b8[board[8][3]]++;  
    b8[board[8][4]]++;  
    b8[board[8][5]]++;  

    b9[board[6][6]]++;
    b9[board[6][7]]++;
    b9[board[6][8]]++;
    b9[board[7][6]]++;
    b9[board[7][7]]++;
    b9[board[7][8]]++;
    b9[board[8][6]]++;
    b9[board[8][7]]++;
    b9[board[8][8]]++;

    return check(r1) && check(r2) && check(r3) && check(r4) && check(r5) && check(r6) && check(r7) && check(r8) && check(r9) &&
       check(c1) && check(c2) && check(c3) && check(c4) && check(c5) && check(c6) && check(c7) && check(c8) && check(c9) &&
       check(b1) && check(b2) && check(b3) && check(b4) && check(b5) && check(b6) && check(b7) && check(b8) && check(b9);

    }
};


// OPTiMIZATION

class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        bool rows[9][9] = {false};
        bool cols[9][9] = {false};
        bool boxes[9][9] = {false};

        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                char c = board[i][j];
                if (c == '.') continue;

                int num = c - '1';  // digit index 0â€“8
                int boxIndex = (i / 3) * 3 + (j / 3);

                if (rows[i][num] || cols[j][num] || boxes[boxIndex][num]) {
                    return false;  // duplicate found
                }

                rows[i][num] = cols[j][num] = boxes[boxIndex][num] = true;
            }
        }
        return true;
    }
};
